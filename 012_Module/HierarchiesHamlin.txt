/* 
Ship, CruiseShip and CargoShip Classes and

Design a Ship class that has the following members:

    A member variable for the name of the ship (a string )
    A member variable for the year that the ship was built (a string)
    A constructor and appropriate accessors and mutators
    A virtual print function that displays the ship’s name and the year it was built.
Design a CruiseShip class that is derived from the Ship class. The CruiseShip class should have the following members:

    A member variable for the maximum number of passengers (an int)
    A constructor and appropriate accessors and mutators
    A print function that overrides the print function in the base class. The CruiseShip class’s print function should display only the ship’s name and the maximum number of passengers.
Design a CargoShip class that is derived from the Ship class. The CargoShip class should have the following members:

    A member variable for the cargo capacity in tonnage (an int)
    A constructor and appropriate accessors and mutators
    A print function that overrides the print function in the base class. The CargoShip class’s print function should display only the ship’s name and the ship’s cargo capacity.
Demonstrate the classes in a program that has a vector of Ship. Add (using push_back) CruiseShip and CargoShip objects onto the vector of ship. The program should then step through (use a loop) the vector, calling each object’s print function. */

+++++++++++++++++++++++++++
/* This code first defines a Ship class with a constructor, accessors (getters), mutators (setters), and a virtual print function. Then it defines CruiseShip and CargoShip classes that inherit from Ship and add their own attributes with their own accessors, mutators, and print functions. The main() function creates a vector of Ship pointers, adds CruiseShip and CargoShip objects onto the vector, and then steps through the vector, calling each object’s print function. */
++++++++++++++++

#include <iostream>
#include <string>
#include <vector>

// Base class
class Ship {
public:
    // Constructor
    Ship(std::string name, std::string yearBuilt) : name(name), yearBuilt(yearBuilt) {}

    // Accessors (getters)
    std::string getName() { return name; }
    std::string getYearBuilt() { return yearBuilt; }

    // Mutators (setters)
    void setName(std::string name) { this->name = name; }
    void setYearBuilt(std::string yearBuilt) { this->yearBuilt = yearBuilt; }

    // Virtual print function
    virtual void print() {
        std::cout << "Name: " << name << ", Year Built: " << yearBuilt << std::endl;
    }

private:
    std::string name;
    std::string yearBuilt;
};

// Derived class
class CruiseShip : public Ship {
public:
    // Constructor
    CruiseShip(std::string name, std::string yearBuilt, int maxPassengers) 
        : Ship(name, yearBuilt), maxPassengers(maxPassengers) {}

    // Accessors (getters)
    int getMaxPassengers() { return maxPassengers; }

    // Mutators (setters)
    void setMaxPassengers(int maxPassengers) { this->maxPassengers = maxPassengers; }

    // Print function
    void print() override {
        std::cout << "Name: " << getName() << ", Max Passengers: " << maxPassengers << std::endl;
    }

private:
    int maxPassengers;
};

// Derived class
class CargoShip : public Ship {
public:
    // Constructor
    CargoShip(std::string name, std::string yearBuilt, int cargoCapacity) 
        : Ship(name, yearBuilt), cargoCapacity(cargoCapacity) {}

    // Accessors (getters)
    int getCargoCapacity() { return cargoCapacity; }

    // Mutators (setters)
    void setCargoCapacity(int cargoCapacity) { this->cargoCapacity = cargoCapacity; }

    // Print function
    void print() override {
        std::cout << "Name: " << getName() << ", Cargo Capacity: " << cargoCapacity << std::endl;
    }

private:
    int cargoCapacity;
};

int main() {
    // Vector of Ship pointers
    std::vector<Ship*> ships;

    // Add CruiseShip and CargoShip objects onto the vector of Ship
    ships.push_back(new CruiseShip("Cruise1", "2000", 500));
    ships.push_back(new CargoShip("Cargo1", "2005", 10000));

    // Step through the vector, calling each object’s print function
    for (Ship* ship : ships) {
        ship->print();
    }

    // Clean up
    for (Ship* ship : ships) {
        delete ship;
    }

    return 0;
}